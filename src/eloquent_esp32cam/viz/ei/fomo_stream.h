#pragma once

#ifndef ELOQUENT_ESP32CAM_VIZ_EI_FOMO_STREAM_H
#define ELOQUENT_ESP32CAM_VIZ_EI_FOMO_STREAM_H

#include "../../camera/Camera.h"
#include "../../extra/exception.h"
#include "../../extra/esp32/http/server.h"
#include "../../edgeimpulse/fomo.h"
#include "../mjpeg.h"

using eloq::camera;
using eloq::viz::mjpeg;
using eloq::ei::fomo;
using Eloquent::Extra::Exception;
using Eloquent::Extra::Esp32::Http::HttpServer;

namespace Eloquent {
    namespace Esp32cam {
        namespace Viz {
            namespace EdgeImpulse {
                /**
                 * Show FOMO results in web browser
                 * overlayed over MJPEG stream
                 */
                class FOMOStream {
                    public:
                        Exception exception;
                        HttpServer server;

                        /**
                         * Constructor
                         */
                        FOMOStream() :
                            exception("FOMO Stream"),
                            server("FOMO Stream") {

                            }

                        /**
                         * Debug self IP address
                         */
                        String address() const {
                            return String("FOMO stream is available at http://") + wifi.ip();
                        }

                        /**
                         * Start server
                         */
                        Exception& begin() {
                            if (!mjpeg.begin().isOk())
                                return exception.propagate(mjpeg);

                            onIndex();
                            onEventStream();

                            return server.beginInThread(exception);
                        }

                    protected:

                        /**
                         * Display main page
                         */
                        void onIndex() {
                        server.onGET("/", [this](WebServer *web) {
                            static const uint8_t index[4775] = {31, 139, 8, 0, 0, 0, 0, 0, 0, 19, 157, 87, 81, 111, 163, 56, 16, 126, 239, 175, 176, 146, 61, 1, 221, 4, 218, 213, 62, 156, 178, 73, 86, 39, 221, 86, 58, 233, 78, 61, 181, 119, 79, 171, 213, 149, 152, 33, 184, 53, 54, 178, 77, 18, 148, 203, 127, 63, 27, 67, 67, 27, 8, 228, 70, 106, 129, 241, 204, 55, 159, 199, 227, 177, 51, 79, 84, 74, 151, 87, 72, 203, 60, 129, 48, 178, 175, 229, 167, 34, 138, 194, 242, 238, 254, 143, 123, 244, 168, 4, 132, 41, 122, 4, 177, 1, 49, 15, 236, 200, 209, 82, 98, 65, 50, 133, 164, 192, 139, 81, 162, 84, 38, 103, 65, 128, 35, 230, 171, 144, 208, 45, 97, 17, 150, 210, 199, 60, 29, 45, 231, 129, 53, 173, 2, 6, 199, 136, 243, 21, 143, 10, 180, 155, 70, 161, 10, 23, 163, 95, 178, 204, 245, 70, 8, 211, 80, 202, 197, 40, 166, 176, 67, 68, 65, 42, 167, 24, 152, 2, 129, 158, 115, 169, 72, 92, 84, 159, 163, 6, 149, 136, 108, 106, 55, 1, 52, 84, 100, 3, 141, 225, 210, 132, 164, 107, 52, 43, 185, 166, 207, 25, 172, 71, 40, 120, 103, 160, 35, 101, 218, 21, 52, 157, 152, 139, 197, 104, 181, 226, 58, 62, 67, 230, 9, 114, 132, 102, 47, 80, 88, 173, 79, 162, 119, 232, 53, 137, 83, 109, 57, 146, 213, 228, 194, 149, 228, 52, 215, 49, 8, 163, 132, 193, 116, 69, 57, 126, 65, 219, 233, 103, 148, 232, 191, 21, 23, 17, 136, 233, 167, 250, 37, 76, 87, 250, 255, 231, 155, 27, 52, 85, 34, 100, 210, 176, 155, 238, 166, 183, 193, 167, 166, 162, 40, 21, 130, 231, 44, 130, 104, 26, 231, 148, 106, 174, 82, 21, 20, 22, 163, 61, 133, 88, 205, 208, 211, 135, 125, 201, 27, 239, 14, 63, 61, 77, 144, 226, 89, 67, 87, 104, 221, 193, 44, 82, 246, 255, 216, 91, 178, 221, 228, 59, 217, 180, 144, 41, 74, 213, 150, 68, 42, 57, 42, 183, 165, 50, 1, 178, 78, 26, 222, 201, 25, 218, 243, 224, 100, 45, 116, 249, 86, 235, 219, 40, 27, 107, 214, 94, 209, 65, 144, 179, 236, 101, 109, 42, 56, 8, 105, 166, 231, 251, 172, 139, 32, 130, 24, 196, 187, 130, 110, 184, 190, 141, 105, 54, 1, 223, 250, 127, 193, 78, 221, 137, 48, 133, 106, 63, 45, 80, 156, 51, 172, 8, 103, 46, 176, 40, 227, 132, 169, 9, 226, 172, 52, 241, 208, 254, 100, 54, 42, 33, 210, 151, 39, 190, 109, 166, 70, 40, 40, 180, 202, 99, 205, 83, 91, 59, 206, 85, 171, 81, 12, 10, 39, 175, 225, 189, 86, 27, 35, 190, 74, 128, 185, 2, 36, 90, 44, 59, 226, 213, 130, 57, 147, 10, 105, 150, 81, 25, 89, 251, 248, 102, 119, 251, 107, 80, 15, 165, 210, 237, 14, 115, 244, 143, 0, 115, 11, 192, 96, 139, 76, 234, 126, 181, 154, 65, 222, 2, 42, 199, 7, 88, 127, 219, 101, 174, 227, 95, 127, 29, 143, 31, 239, 239, 198, 99, 215, 255, 248, 213, 27, 143, 191, 217, 247, 107, 207, 153, 32, 71, 58, 94, 123, 122, 106, 177, 179, 241, 205, 195, 245, 108, 46, 234, 252, 163, 44, 79, 51, 119, 31, 113, 6, 19, 180, 9, 105, 14, 135, 174, 21, 105, 10, 137, 145, 107, 124, 206, 207, 230, 24, 95, 229, 130, 125, 57, 79, 210, 72, 181, 224, 31, 23, 117, 2, 125, 251, 116, 75, 102, 154, 58, 215, 197, 71, 216, 186, 39, 139, 70, 76, 38, 57, 5, 159, 242, 181, 107, 97, 123, 146, 100, 36, 8, 202, 180, 155, 62, 142, 76, 111, 64, 177, 233, 71, 131, 178, 33, 192, 87, 32, 85, 29, 107, 72, 18, 141, 152, 50, 255, 254, 207, 4, 197, 102, 219, 76, 76, 185, 169, 31, 101, 217, 249, 176, 3, 60, 156, 185, 17, 37, 138, 129, 81, 107, 210, 101, 84, 95, 167, 52, 213, 117, 65, 129, 173, 85, 130, 150, 232, 102, 216, 170, 214, 82, 237, 249, 55, 96, 195, 16, 14, 8, 135, 122, 3, 35, 215, 52, 140, 195, 176, 73, 190, 246, 4, 147, 170, 94, 143, 1, 160, 122, 205, 5, 224, 92, 72, 232, 53, 181, 117, 220, 182, 157, 204, 46, 242, 190, 156, 5, 56, 116, 231, 164, 99, 232, 112, 213, 254, 117, 89, 223, 214, 215, 145, 190, 126, 91, 205, 171, 189, 118, 202, 123, 134, 62, 176, 204, 221, 72, 95, 141, 62, 236, 43, 92, 125, 106, 134, 6, 209, 79, 184, 84, 135, 217, 207, 183, 193, 211, 164, 21, 192, 222, 60, 102, 232, 251, 143, 73, 251, 106, 16, 70, 84, 231, 57, 96, 196, 118, 197, 215, 179, 163, 110, 169, 141, 211, 200, 117, 2, 216, 232, 251, 148, 212, 253, 208, 22, 162, 215, 223, 234, 203, 19, 201, 178, 51, 25, 50, 94, 189, 37, 224, 203, 140, 106, 182, 206, 191, 78, 127, 137, 251, 105, 152, 185, 101, 27, 233, 165, 242, 118, 166, 89, 168, 185, 200, 106, 166, 127, 63, 252, 254, 8, 161, 192, 201, 159, 165, 182, 4, 28, 216, 16, 206, 174, 107, 155, 56, 36, 114, 102, 38, 188, 132, 223, 152, 114, 45, 15, 115, 244, 185, 102, 196, 243, 218, 23, 184, 21, 105, 167, 129, 110, 245, 157, 239, 218, 194, 221, 81, 30, 190, 5, 220, 93, 134, 87, 244, 225, 21, 151, 225, 109, 251, 240, 182, 151, 225, 37, 125, 120, 201, 101, 120, 184, 55, 129, 248, 194, 12, 226, 222, 20, 226, 225, 57, 60, 244, 183, 222, 158, 34, 53, 231, 79, 99, 7, 94, 116, 252, 52, 15, 119, 199, 250, 235, 141, 223, 64, 59, 219, 107, 59, 199, 108, 135, 169, 46, 169, 29, 119, 140, 211, 137, 15, 107, 211, 243, 192, 92, 35, 151, 87, 250, 119, 163, 249, 209, 250, 31, 90, 61, 38, 51, 187, 14, 0, 0};
                            server.sendGzip(index, 4775);
                        });
                    }

                        /**
                         * 
                         */
                        void onEventStream() {
                            server.onStream("/events", [this](WebServer *web, WiFiClient *client) {
                                if (!fomo.run().isOk()) {
                                    delay(10);
                                    client->print("err=");
                                    client->print(fomo.exception.toString());
                                    return;
                                }

                                if (!fomo.found()) {
                                    client->print("status=No objects found");
                                    return;
                                }

                                fomo.forEach([client](int i, eloq::ei::bbox_t bbox) {
                                    ESP_LOGI(
                                        "FOMO", 
                                        "id=%d,x=%d,y=%d,w=%d,h=%d,cx=%d,cy=%d",
                                        i, 
                                        bbox.x, 
                                        bbox.y, 
                                        bbox.width, 
                                        bbox.height,
                                        bbox.cx,
                                        bbox.cy
                                    );
                                    client->print("id=");
                                    client->print(i);
                                    client->print("&x=");
                                    client->print(((float) bbox.x) / EI_CLASSIFIER_INPUT_WIDTH);
                                    client->print("&y=");
                                    client->print(((float) bbox.y) / EI_CLASSIFIER_INPUT_HEIGHT);
                                    client->print("&w=");
                                    client->print(((float) bbox.width) / EI_CLASSIFIER_INPUT_WIDTH);
                                    client->print("&h=");
                                    client->print(((float) bbox.height) / EI_CLASSIFIER_INPUT_HEIGHT);
                                    client->print("&cx=");
                                    client->print(((float) bbox.cx) / EI_CLASSIFIER_INPUT_WIDTH);
                                    client->print("&cy=");
                                    client->print(((float) bbox.cy) / EI_CLASSIFIER_INPUT_HEIGHT);
                                    client->print("|");
                                });
                            }, 7000);
                        }
                };
            }
        }
    }
}

namespace eloq {
    namespace viz {
        namespace ei {
            static Eloquent::Esp32cam::Viz::EdgeImpulse::FOMOStream fomoStream;
        }
    }
}

#endif